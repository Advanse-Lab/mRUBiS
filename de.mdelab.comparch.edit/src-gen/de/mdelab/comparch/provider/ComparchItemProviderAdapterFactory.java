/**
 */
package de.mdelab.comparch.provider;

import de.mdelab.comparch.util.ComparchAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ComparchItemProviderAdapterFactory extends ComparchAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComparchItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.comparch.Architecture} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArchitectureItemProvider architectureItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.comparch.Architecture}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArchitectureAdapter() {
		if (architectureItemProvider == null) {
			architectureItemProvider = new ArchitectureItemProvider(this);
		}

		return architectureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.comparch.ComponentType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentTypeItemProvider componentTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.comparch.ComponentType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentTypeAdapter() {
		if (componentTypeItemProvider == null) {
			componentTypeItemProvider = new ComponentTypeItemProvider(this);
		}

		return componentTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.comparch.Component} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentItemProvider componentItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.comparch.Component}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentAdapter() {
		if (componentItemProvider == null) {
			componentItemProvider = new ComponentItemProvider(this);
		}

		return componentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.comparch.InterfaceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterfaceTypeItemProvider interfaceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.comparch.InterfaceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterfaceTypeAdapter() {
		if (interfaceTypeItemProvider == null) {
			interfaceTypeItemProvider = new InterfaceTypeItemProvider(this);
		}

		return interfaceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.comparch.MethodSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MethodSpecificationItemProvider methodSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.comparch.MethodSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMethodSpecificationAdapter() {
		if (methodSpecificationItemProvider == null) {
			methodSpecificationItemProvider = new MethodSpecificationItemProvider(this);
		}

		return methodSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.comparch.ParameterType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterTypeItemProvider parameterTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.comparch.ParameterType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterTypeAdapter() {
		if (parameterTypeItemProvider == null) {
			parameterTypeItemProvider = new ParameterTypeItemProvider(this);
		}

		return parameterTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.comparch.Tenant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TenantItemProvider tenantItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.comparch.Tenant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTenantAdapter() {
		if (tenantItemProvider == null) {
			tenantItemProvider = new TenantItemProvider(this);
		}

		return tenantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.comparch.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.comparch.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.comparch.RequiredInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequiredInterfaceItemProvider requiredInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.comparch.RequiredInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequiredInterfaceAdapter() {
		if (requiredInterfaceItemProvider == null) {
			requiredInterfaceItemProvider = new RequiredInterfaceItemProvider(this);
		}

		return requiredInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.comparch.ProvidedInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProvidedInterfaceItemProvider providedInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.comparch.ProvidedInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProvidedInterfaceAdapter() {
		if (providedInterfaceItemProvider == null) {
			providedInterfaceItemProvider = new ProvidedInterfaceItemProvider(this);
		}

		return providedInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.comparch.Connector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectorItemProvider connectorItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.comparch.Connector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectorAdapter() {
		if (connectorItemProvider == null) {
			connectorItemProvider = new ConnectorItemProvider(this);
		}

		return connectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.comparch.Exception} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExceptionItemProvider exceptionItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.comparch.Exception}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExceptionAdapter() {
		if (exceptionItemProvider == null) {
			exceptionItemProvider = new ExceptionItemProvider(this);
		}

		return exceptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.comparch.MonitoredProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MonitoredPropertyItemProvider monitoredPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.comparch.MonitoredProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMonitoredPropertyAdapter() {
		if (monitoredPropertyItemProvider == null) {
			monitoredPropertyItemProvider = new MonitoredPropertyItemProvider(this);
		}

		return monitoredPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.comparch.Annotations} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnnotationsItemProvider annotationsItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.comparch.Annotations}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnnotationsAdapter() {
		if (annotationsItemProvider == null) {
			annotationsItemProvider = new AnnotationsItemProvider(this);
		}

		return annotationsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.comparch.Issue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IssueItemProvider issueItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.comparch.Issue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIssueAdapter() {
		if (issueItemProvider == null) {
			issueItemProvider = new IssueItemProvider(this);
		}

		return issueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.comparch.AdaptationStrategy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdaptationStrategyItemProvider adaptationStrategyItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.comparch.AdaptationStrategy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdaptationStrategyAdapter() {
		if (adaptationStrategyItemProvider == null) {
			adaptationStrategyItemProvider = new AdaptationStrategyItemProvider(this);
		}

		return adaptationStrategyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.comparch.Impact} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImpactItemProvider impactItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.comparch.Impact}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImpactAdapter() {
		if (impactItemProvider == null) {
			impactItemProvider = new ImpactItemProvider(this);
		}

		return impactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.comparch.InputParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputParameterItemProvider inputParameterItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.comparch.InputParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputParameterAdapter() {
		if (inputParameterItemProvider == null) {
			inputParameterItemProvider = new InputParameterItemProvider(this);
		}

		return inputParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.comparch.WorkingData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkingDataItemProvider workingDataItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.comparch.WorkingData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkingDataAdapter() {
		if (workingDataItemProvider == null) {
			workingDataItemProvider = new WorkingDataItemProvider(this);
		}

		return workingDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.comparch.ConcernedElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConcernedElementItemProvider concernedElementItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.comparch.ConcernedElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConcernedElementAdapter() {
		if (concernedElementItemProvider == null) {
			concernedElementItemProvider = new ConcernedElementItemProvider(this);
		}

		return concernedElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.comparch.PerformanceStats} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PerformanceStatsItemProvider performanceStatsItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.comparch.PerformanceStats}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPerformanceStatsAdapter() {
		if (performanceStatsItemProvider == null) {
			performanceStatsItemProvider = new PerformanceStatsItemProvider(this);
		}

		return performanceStatsItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (architectureItemProvider != null)
			architectureItemProvider.dispose();
		if (componentTypeItemProvider != null)
			componentTypeItemProvider.dispose();
		if (componentItemProvider != null)
			componentItemProvider.dispose();
		if (interfaceTypeItemProvider != null)
			interfaceTypeItemProvider.dispose();
		if (methodSpecificationItemProvider != null)
			methodSpecificationItemProvider.dispose();
		if (parameterTypeItemProvider != null)
			parameterTypeItemProvider.dispose();
		if (tenantItemProvider != null)
			tenantItemProvider.dispose();
		if (parameterItemProvider != null)
			parameterItemProvider.dispose();
		if (requiredInterfaceItemProvider != null)
			requiredInterfaceItemProvider.dispose();
		if (providedInterfaceItemProvider != null)
			providedInterfaceItemProvider.dispose();
		if (connectorItemProvider != null)
			connectorItemProvider.dispose();
		if (exceptionItemProvider != null)
			exceptionItemProvider.dispose();
		if (monitoredPropertyItemProvider != null)
			monitoredPropertyItemProvider.dispose();
		if (annotationsItemProvider != null)
			annotationsItemProvider.dispose();
		if (issueItemProvider != null)
			issueItemProvider.dispose();
		if (adaptationStrategyItemProvider != null)
			adaptationStrategyItemProvider.dispose();
		if (impactItemProvider != null)
			impactItemProvider.dispose();
		if (inputParameterItemProvider != null)
			inputParameterItemProvider.dispose();
		if (workingDataItemProvider != null)
			workingDataItemProvider.dispose();
		if (concernedElementItemProvider != null)
			concernedElementItemProvider.dispose();
		if (performanceStatsItemProvider != null)
			performanceStatsItemProvider.dispose();
	}

}
